{"version":3,"sources":["components/Card.jsx","components/RowOfCards.jsx","components/Board.jsx","components/ScoreBoard.jsx","App.js","serviceWorker.js","index.js","images/red1.jpg","images/red2.jpg","images/blue1.jpg","images/blue2.jpg","images/yellow1.jpg","images/yellow2.jpg","images/black.jpg"],"names":["belongs","currentTurn","Card","props","state","componentDidMount","getBackgroundColor","_belongsTo","isEnabled","card","IsFliped","isHost","getBackgroundImage","res","captainMode","redColor","ImageOne","RED1","RED2","blueColor","BLUE1","BLUE2","yellowColor","YELLOW1","YELLOW2","BelongsTo","BLACK","onButtonClick","socket","emit","game_id","gameId","ex","console","log","mystyle","margin","paddingTop","width","backgroundColor","this","backgroundImage","backgroundSize","borderRadius","borderColor","position","opacity","Button","className","style","disabled","onClick","fontWeight","fontFamily","color","bottom","left","right","marginLeft","marginRight","borderWidth","Value","Component","RowOfCards","getCards","cards","map","board","Board","getRowsOfCards","RowsOfCards","rowOfCards","Cards","Fragment","Stats","totalPlayers","players","length","Header","title","Counter","score","Player","name","turn","Spinner","animation","variant","onChange","onScoreChange","ScoreBoard","initialPlayers","player","index","delta","_onScoreChange","key","id","status","winner","io","App","game_name","user_id","user_name","captain_mode","is_host","start_button_clicked","current_turn","previous_game","createNewGame","setState","ConnectGame","changeToCaptainMode","e","changeBackToNormalMode","isMyTurn","startButtonOnClick","ShuffleButtonOnClick","rematchButtonOnClick","endTurnButtonOnClick","on","data","games","Id","HostPlayer","Score","HostedPlayer","HostTurn","Winner","game","Name","onChangeModeClick","ChangeModeStyle","marginTop","fontSize","turnMessageVariant","winnerColor","Image","src","Accordion","Toggle","as","eventKey","Collapse","Body","Form","Row","Group","Col","controlId","Label","Control","placeholder","target","value","type","Badge","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"qaAYMA,EAEE,OAFFA,EAGI,SAHJA,EAIK,UAJLA,EAKG,QAGHC,EACE,OADFA,EAEE,OAFFA,EAGI,SAEWC,E,kDAGnB,WAAYC,GAAQ,IAAD,8BACjB,gBAHFC,MAAQ,GAEW,EADnBC,kBAAoB,aACD,EASnBC,mBAAqB,SAACC,GACpB,OAAQA,GACN,KAAKP,EAEH,MAAO,mBAIT,KAAKA,EACH,MAAO,mBAET,KAAKA,EACH,MAAO,oBAET,KAAKA,EACH,MAAO,UAxBM,EA6BnBQ,UAAY,WACV,OAAI,EAAKL,MAAMM,KAAKC,aAChB,EAAKP,MAAMF,aAAeA,IAAoB,EAAKU,aAEjD,EAAKR,MAAMQ,QAAU,EAAKR,MAAMF,aAAeA,KAGhD,EAAKE,MAAMQ,QACZ,EAAKR,MAAMF,aAAeA,KArCb,EA2CnBW,mBAAqB,WACnB,IAAIC,EAAM,GACV,GAAI,EAAKV,MAAMW,cAAgB,EAAKX,MAAMM,KAAKC,SAAU,OAAOG,EAE9D,IAAME,EAAW,EAAKZ,MAAMM,KAAKO,SAAWC,IAAOC,IAC7CC,EAAY,EAAKhB,MAAMM,KAAKO,SAAWI,IAAQC,IAC/CC,EAAc,EAAKnB,MAAMM,KAAKO,SAAWO,IAAUC,IACzD,OAAQ,EAAKrB,MAAMM,KAAKgB,WACtB,KAAKzB,EACHa,EAAM,OAASE,EAAW,IAC1B,MACF,KAAKf,EACHa,EAAM,OAASM,EAAY,IAC3B,MACF,KAAKnB,EACHa,EAAM,OAASS,EAAc,IAC7B,MACF,KAAKtB,EACHa,EAAM,OAASa,IAAQ,IAI3B,OAAOb,GAjEQ,EAoEnBc,cAAgB,WAGd,IACE,EAAKxB,MAAMyB,OAAOC,KAAK,eAAgB,CACrCpB,KAAM,EAAKN,MAAMM,KACjBqB,QAAS,EAAK3B,MAAM4B,SAGtB,MAAOC,GACPC,QAAQC,IAAIF,KA9EG,E,qDAkFjB,IAAMG,EAAU,CACdC,OAAQ,KACRC,WAAY,MACZC,MAAO,MACPC,gBAAiBC,KAAKrC,MAAMW,YACxB0B,KAAKlC,mBAAmBkC,KAAKrC,MAAMM,KAAKgB,WACxC,qBACJgB,gBAAiBD,KAAK5B,qBACtB8B,eAAgB,QAChBC,aAAc,QACdC,YAAa,qBACbC,SAAU,WACVC,QAAS,GAEX,OACE,kBAACC,EAAA,EAAD,CACEC,UAAWR,KAAKrC,MAAMM,KAAKC,SAAW,aAAe,GACrDuC,MAAOd,EACPe,UAAWV,KAAKhC,YAChB2C,QAASX,KAAKb,eAEZa,KAAKrC,MAAMM,KAAKC,SAoBd,KAnBF,wBACEuC,MAAO,CACLG,WAAY,OACZC,WAAY,gBACZd,gBAAiB,QACjBe,MAAO,QACPT,SAAU,WACVU,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,WAAY,MACZC,YAAa,MACbhB,aAAc,QACdC,YAAa,QACbgB,YAAa,QAGdpB,KAAKrC,MAAMM,KAAKoD,Y,GA5HKC,aCnBbC,G,wDAGnB,WAAY5D,GAAQ,IAAD,8BACjB,gBAHFC,MAAQ,GAEW,EADnBC,kBAAoB,aACD,EAGnB2D,SAAW,WACT,OAAO,EAAK7D,MAAM8D,MAAMC,KAAI,SAACzD,GAAD,OAC1B,kBAAC,EAAD,CAEE0D,MAAO,EAAKhE,MAAMgE,MAClB1D,KAAMA,EACNK,YAAa,EAAKX,MAAMW,YACxBb,YAAa,EAAKE,MAAMF,YACxBU,OAAQ,EAAKR,MAAMQ,OACnBiB,OAAQ,EAAKzB,MAAMyB,OACnBG,OAAQ,EAAK5B,MAAM4B,aAbN,E,qDAkBjB,OAAO,yBAAKiB,UAAU,SAASR,KAAKwB,gB,GArBAF,cCFnBM,E,kDAEnB,WAAYjE,GAAQ,IAAD,8BACjB,gBAFFC,MAAQ,GACW,EAGnBiE,eAAiB,WACf,OAAO,EAAKlE,MAAMgE,MAAMG,YAAYJ,KAAI,SAACK,GAAD,OACtC,kBAAC,EAAD,CACEJ,MAAO,EAAKhE,MAAMgE,MAClBF,MAAOM,EAAWC,MAClB1D,YAAa,EAAKX,MAAMW,YACxBH,OAAQ,EAAKR,MAAMQ,OACnBV,YAAa,EAAKE,MAAMF,YACxB2B,OAAQ,EAAKzB,MAAMyB,OACnBG,OAAQ,EAAK5B,MAAM4B,aAZN,EAiBnB1B,kBAAoB,aAjBD,E,qDAoBjB,OACE,kBAAC,IAAMoE,SAAP,KACE,yBAAKzB,UAAU,SAASR,KAAK6B,uB,GAxBFP,aCO7BY,G,OAAQ,SAACvE,GACb,IAAMwE,EAAexE,EAAMyE,QAAQC,OAEnC,OACE,2BAAO7B,UAAU,SACf,+BACE,4BACE,uCACA,4BAAK2B,QAYTG,EAAS,SAAC3E,GAAD,OACb,yBAAK6C,UAAU,UACb,kBAAC,EAAD,CAAO4B,QAASzE,EAAMyE,UACtB,4BAAKzE,EAAM4E,SAUTC,EAAU,SAAC7E,GAAD,OACd,yBAAK6C,UAAU,WACb,yBAAKA,UAAU,iBAAf,IAAiC7C,EAAM8E,MAAvC,OAKEC,EAAS,SAAC/E,GAAD,OACb,yBAAK6C,UAAU,UACb,yBAAKA,UAAU,eAAe7C,EAAMgF,MACpB,QAAdhF,EAAMiF,MAAgC,YAAdjF,EAAMgF,MACjB,UAAdhF,EAAMiF,MAAkC,aAAdjF,EAAMgF,KAC/B,yBAAKnC,UAAU,WACb,kBAACqC,EAAA,EAAD,CACEC,UAAU,OACVC,QAAuB,YAAdpF,EAAMgF,KAAqB,SAAW,aAGjD,KACJ,yBAAKnC,UAAU,gBACb,kBAAC,EAAD,CAASiC,MAAO9E,EAAM8E,MAAOO,SAAUrF,EAAMsF,mBAwCpCC,E,kDAlCb,WAAYvF,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,GAHI,E,qDAaT,IAAD,OACP,OACE,yBAAK4C,UAAU,cACb,kBAAC,EAAD,CAAQ+B,MAAOvC,KAAKrC,MAAM4E,MAAOH,QAASpC,KAAKrC,MAAMwF,iBAErD,yBAAK3C,UAAU,WACZR,KAAKrC,MAAMwF,eAAezB,KAAI,SAAC0B,EAAQC,GAAT,OAC7B,kBAAC,EAAD,CACEJ,cAAe,SAACK,GAAD,OAAW,EAAKC,eAAeF,EAAOC,IACrDV,KAAM,EAAKjF,MAAMiF,KACjBD,KAAMS,EAAOT,KACbF,MAAOW,EAAOX,MACde,IAAKJ,EAAOK,c,GA1BDnC,aCtDnBoC,EACK,UADLA,EAEK,UAFLA,EAGK,UAHLA,EAIM,WAENjG,GACE,OADFA,GAEE,OAFFA,GAGI,SAEJkG,GACK,UADLA,GAEE,OAKFvE,GAASwE,IAAG,4CA6YHC,G,kDA3Xb,WAAYlG,GAAQ,IAAD,8BACjB,cAAMA,IAhBRC,MAAQ,CACN0B,SAAU,EACVwE,UAAW,GACXC,QAAS,GACTC,UAAW,GACXN,OAAQA,EACR/B,MAAO,GACPsC,cAAc,EACdC,SAAS,EACTC,sBAAsB,EACtBC,aAAc3G,GACd2E,QAAS,GACTiC,cAAe,IAGE,EAyFnBC,cAAgB,WACd,EAAKC,SAAS,CAAEL,SAAS,IACzB9E,GAAOC,KAAK,cAAe,CACzByE,UAAW,EAAKlG,MAAMkG,UACtBC,QAAS,EAAKnG,MAAMmG,QACpBC,UAAW,EAAKpG,MAAMoG,aA9FP,EAiGnBQ,YAAc,WACZpF,GAAOC,KAAK,eAAgB,CAC1BC,QAAS,EAAK1B,MAAM0B,QACpByE,QAAS,EAAKnG,MAAMmG,QACpBC,UAAW,EAAKpG,MAAMoG,aArGP,EAwGnBS,oBAAsB,SAACC,GACrB,EAAKH,SAAS,CAAEN,cAAc,KAzGb,EA4GnBU,uBAAyB,SAACD,GACxB,EAAKH,SAAS,CAAEN,cAAc,KA7Gb,EA+GnBW,SAAW,WACT,IAAIvG,GAAM,EAWV,OATwB,GAAtB,EAAKT,MAAMsG,SACX,EAAKtG,MAAMwG,cAAgB3G,IAIL,GAAtB,EAAKG,MAAMsG,SACX,EAAKtG,MAAMwG,cAAgB3G,MAH3BY,GAAM,GAMDA,GA3HU,EA8HnBwG,mBAAqB,SAACH,GACpB,EAAKH,SAAS,CAAEJ,sBAAsB,IACtC/E,GAAOC,KAAK,aAAc,CACxBC,QAAS,EAAK1B,MAAM0B,WAjIL,EAoInBwF,qBAAuB,SAACJ,GACtBtF,GAAOC,KAAK,gBAAiB,CAAGC,QAAS,EAAK1B,MAAM0B,WArInC,EAwInByF,qBAAuB,SAACL,GACtBtF,GAAOC,KAAK,UAAW,EAAKzB,MAAMyG,gBAzIjB,EA2InBW,qBAAuB,SAACN,GACtBtF,GAAOC,KAAK,cAAe,CACzBC,QAAS,EAAK1B,MAAM0B,WA7IL,E,gEAGE,IAAD,OAElBF,GAAO6F,GAAG,qBAAqB,SAACC,GAC9B,EAAKX,SAAS,CAAER,QAASmB,EAAKnB,UAC9BtE,QAAQC,IAAI,4BAA8B,EAAK9B,MAAMmG,SACvDtE,QAAQC,IAAIwF,EAAKC,UAGjB/F,GAAO6F,GAAG,gBAAgB,SAACC,GACzBzF,QAAQC,IAAI,gBACZ,EAAK6E,SAAS,CAAEb,OAAQA,EAAgBpE,QAAS4F,EAAKE,QAGxDhG,GAAO6F,GAAG,YAAY,SAACC,GAErB,EAAKX,SAAS,CAAEb,OAAQA,EAAgB/B,MAAOuD,EAAKtD,WAGtDxC,GAAO6F,GAAG,cAAc,SAACC,GACvB,EAAKX,SAAS,CACZH,aAAc3G,GACd2E,QAAS,CACP,CACEO,KAAM,WACNF,MAAOyC,EAAKG,WAAWC,MACvB7B,GAAI,GAEN,CACEd,KAAM,YACNF,MAAOyC,EAAKK,aAAaD,MACzB7B,GAAI,SAKZrE,GAAO6F,GAAG,gBAAgB,SAACC,GAEzB,EAAKX,SAAS,CACZ5C,MAAOuD,EAAKtD,MACZwC,aAAcc,EAAKM,SAAW/H,GAAmBA,GACjDkG,OAAQuB,EAAKO,OACb/B,OACEwB,EAAKO,QAAU9B,GAAiBD,EAAkB,EAAK9F,MAAM8F,OAC/DtB,QAAS,CACP,CACEO,KAAM,WACNF,MAAOyC,EAAKG,WAAWC,MACvB7B,GAAI,GAEN,CACEd,KAAM,YACNF,MAAOyC,EAAKK,aAAaD,MACzB7B,GAAI,MAINyB,EAAKO,QAAU9B,IAAkB,EAAK/F,MAAMsG,SAC9C9E,GAAOC,KAAK,WAAY,CAAEC,QAAS,EAAK1B,MAAM0B,aAGlDF,GAAO6F,GAAG,iBAAiB,SAACC,GAC1B,EAAKX,SAAS,CAAEF,cAAea,OAEjC9F,GAAO6F,GAAG,oBAAoB,SAACC,GAC7BzF,QAAQC,IAAI,iBACZD,QAAQC,IAAIwF,EAAKQ,KAAK9D,OACtB,EAAK2C,SAAS,CACZjF,QAAS4F,EAAKQ,KAAKN,GACnBtB,UAAWoB,EAAKQ,KAAKC,KACrB5B,QAASmB,EAAKhB,QACVgB,EAAKQ,KAAKL,WAAWD,GACrBF,EAAKQ,KAAKH,aAAaH,GAC3BpB,UAAWkB,EAAKhB,QACZgB,EAAKQ,KAAKL,WAAWM,KACrBT,EAAKQ,KAAKH,aAAaI,KAC3BjC,OAAQA,EACR/B,MAAOuD,EAAKQ,KAAK9D,MACjBqC,cAAc,EACdC,UAASgB,EAAKhB,QACdC,sBAAsB,EACtBC,aAAc3G,GACd2E,QAAS,U,+BA4DL,IAAD,OACHwD,EAAoB5F,KAAKpC,MAAMqG,aAC/BjE,KAAK2E,uBACL3E,KAAKyE,oBAEHoB,EAAkB,CACtBhF,WAAY,gBACZiF,UAAW,OACXlF,WAAY,OACZmF,SAAU,QAINC,GADJhG,KAAKpC,MAAMwG,aAEXpE,KAAKpC,MAAMwG,cAAgB3G,GAAmB,SAAW,WACrDwI,EAAcjG,KAAKpC,MAAM+F,QAAUA,GAAc,MAAQ,OAC/D,OACE,yBAAKnD,UAAU,OACb,kBAAC0F,EAAA,EAAD,CACE1F,UACER,KAAKpC,MAAM8F,SAAWA,EAAiB,eAAiB,MAE1DyC,IAAI,8EAELnG,KAAKpC,MAAM8F,SAAWA,EACrB,6BACE,kBAAC0C,EAAA,EAAD,CAAW5F,UAAU,OACnB,kBAAC,IAAD,CAAMA,UAAU,SACd,kBAAC,IAAK8B,OAAN,KACE,kBAAC8D,EAAA,EAAUC,OAAX,CAAkBC,GAAI/F,IAAQwC,QAAQ,OAAOwD,SAAS,KAAtD,iBAIF,kBAACH,EAAA,EAAUI,SAAX,CAAoBD,SAAS,KAC3B,kBAAC,IAAKE,KAAN,CAAWjG,UAAU,YACnB,kBAACkG,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,CAAYN,GAAIO,IAAKC,UAAU,oBAC7B,kBAACJ,EAAA,EAAKK,MAAN,CAAYvG,UAAU,UAAtB,aACA,kBAACkG,EAAA,EAAKM,QAAN,CACEC,YAAY,kBACZjE,SAAU,SAAC0B,GACT,EAAKH,SAAS,CAAEP,UAAWU,EAAEwC,OAAOC,YAI1C,kBAACT,EAAA,EAAKE,MAAN,CAAYN,GAAIO,IAAKC,UAAU,kBAC7B,kBAACJ,EAAA,EAAKK,MAAN,CAAYvG,UAAU,UAAtB,aACA,kBAACkG,EAAA,EAAKM,QAAN,CACEC,YAAY,kBACZjE,SAAU,SAAC0B,GACT,EAAKH,SAAS,CAAET,UAAWY,EAAEwC,OAAOC,cAM9C,kBAAC5G,EAAA,EAAD,CACEwC,QAAQ,UACRqE,KAAK,SACLzG,QAAS,SAAC+D,GACR,EAAKJ,kBAJT,aAYN,kBAAC,IAAD,CAAM9D,UAAU,SACd,kBAAC,IAAK8B,OAAN,KACE,kBAAC8D,EAAA,EAAUC,OAAX,CACE7F,UAAU,KACV8F,GAAI/F,IACJwC,QAAQ,OACRwD,SAAS,KAJX,eASF,kBAACH,EAAA,EAAUI,SAAX,CAAoBD,SAAS,KAC3B,kBAAC,IAAKE,KAAN,CAAWjG,UAAU,YACnB,kBAACkG,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,CAAYN,GAAIO,IAAKC,UAAU,oBAC7B,kBAACJ,EAAA,EAAKK,MAAN,CAAYvG,UAAU,UAAtB,aACA,kBAACkG,EAAA,EAAKM,QAAN,CACEC,YAAY,kBACZjE,SAAU,SAAC0B,GACT,EAAKH,SAAS,CAAEP,UAAWU,EAAEwC,OAAOC,YAI1C,kBAACT,EAAA,EAAKE,MAAN,CAAYN,GAAIO,IAAKC,UAAU,kBAC7B,kBAACJ,EAAA,EAAKK,MAAN,CAAYvG,UAAU,UAAtB,WACA,kBAACkG,EAAA,EAAKM,QAAN,CACEC,YAAY,gBACZjE,SAAU,SAAC0B,GACT,EAAKH,SAAS,CAAEjF,QAASoF,EAAEwC,OAAOC,cAM5C,kBAAC5G,EAAA,EAAD,CACEwC,QAAQ,UACRqE,KAAK,SACLzG,QAAS,SAAC+D,GACR,EAAKF,gBAJT,eAcR,KACHxE,KAAKpC,MAAM8F,SAAWA,EACrB,6BACE,4BACE,kBAAC2D,EAAA,EAAD,CAAOtE,QAAQ,WAAf,SACS/C,KAAKpC,MAAM0B,QADpB,uBAIF,4BACE,kBAAC+H,EAAA,EAAD,CAAOtE,QAAQ,WAAf,oCAEF,kBAACF,EAAA,EAAD,CAASrC,UAAU,KAAKsC,UAAU,OAAOC,QAAQ,YAEjD,KACH/C,KAAKpC,MAAM8F,SAAWA,EACrB,6BACE,6BACG1D,KAAKpC,MAAMsG,QACTlE,KAAKpC,MAAMuG,qBAsBR,KArBF,6BACA,6BACA,kBAAC5D,EAAA,EAAD,CACEE,MAAOoF,EACP9C,QAAQ,OACRpC,QAASX,KAAK8E,sBAHhB,kBASA,6BACA,kBAACvE,EAAA,EAAD,CACEE,MAAOoF,EACP9C,QAAQ,UACRpC,QAASX,KAAK6E,oBAHhB,WAUA7E,KAAKpC,MAAMwG,cAAgB3G,GAC7B,6BACE,kBAAC4J,EAAA,EAAD,CAAO5G,MAAOoF,EAAiB9C,QAAQ,QAAvC,wCAGA,kBAACF,EAAA,EAAD,CAASC,UAAU,YAEnB,MAEN,6BACG9C,KAAKpC,MAAMwG,cAAgB3G,GAC1B,6BACA,yBAAK+C,UAAU,MACb,kBAAC,EAAD,CACEoC,KAAM5C,KAAKpC,MAAMwG,aACjBjB,eAAgBnD,KAAKpC,MAAMwE,UAE7B,kBAAC7B,EAAA,EAAD,CACEwC,QAAQ,OACRtC,MAAOoF,EACPlF,QAASiF,GAHX,iBAQD5F,KAAK4E,WACN,6BACA,kBAACrE,EAAA,EAAD,CACIwC,QAASiD,EACTvF,MAAOoF,EACPlF,QAASX,KAAKgF,sBAHlB,aAOS,MAEP,MAEN,6BACE,kBAAC,EAAD,CACErD,MAAO3B,KAAKpC,MAAM+D,MAClBxD,OAAQ6B,KAAKpC,MAAMsG,QACnBzG,YAAauC,KAAKpC,MAAMwG,aACxB9F,YAAa0B,KAAKpC,MAAMqG,aACxB7E,OAAQA,GACRG,OAAQS,KAAKpC,MAAM0B,YAKvB,KACHU,KAAKpC,MAAM8F,SAAWA,EACrB,6BACE,6BACE,kBAAC2D,EAAA,EAAD,CACE5G,MAAOoF,EACP9C,QAAwB,OAAfkD,EAAuB,SAAW,WAE1CA,EAJH,eAOF,6BACE,kBAAC1F,EAAA,EAAD,CACEE,MAAOoF,EACP9C,QAAQ,OACRpC,QAASX,KAAK+E,sBAHhB,cASF,U,GAtYMzD,aCvBEgG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9I,QAAQ8I,MAAMA,EAAMC,a,6DEzI5BC,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.c751bfc9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"../App.css\";\r\nimport \"./Card.css\";\r\nimport RED1 from \"../images/red1.jpg\";\r\nimport RED2 from \"../images/red2.jpg\";\r\nimport BLUE1 from \"../images/blue1.jpg\";\r\nimport BLUE2 from \"../images/blue2.jpg\";\r\nimport YELLOW1 from \"../images/yellow1.jpg\";\r\nimport YELLOW2 from \"../images/yellow2.jpg\";\r\nimport BLACK from \"../images/black.jpg\";\r\n\r\nconst belongs = {\r\n  INITIAL: \"initial\",\r\n  HOST: \"host\",\r\n  HOSTED: \"hosted\",\r\n  NEUTRAL: \"neutral\",\r\n  BLACK: \"black\",\r\n};\r\n\r\nconst currentTurn = {\r\n  NONE: \"none\",\r\n  HOST: \"host\",\r\n  HOSTED: \"hosted\",\r\n};\r\nexport default class Card extends Component {\r\n  state = {};\r\n  componentDidMount = () => {};\r\n  constructor(props) {\r\n    super();\r\n    //this.setState({ isFliped: props.card.isFliped });\r\n\r\n    // console.log(props.card.isFliped);\r\n  }\r\n\r\n  //  if (belongsTo == belongs.HOST)\r\n\r\n  getBackgroundColor = (_belongsTo) => {\r\n    switch (_belongsTo) {\r\n      case belongs.HOST:\r\n        // if (this.props.captainMode)\r\n        return \"rgb(196, 19, 19)\";\r\n        // else if (this.state.isFliped)\r\n        //   return \"https://upload.wikimedia.org/wikipedia/he/4/48/Codenames-hebrew-cover.jpg\";\r\n        break;\r\n      case belongs.HOSTED:\r\n        return \"rgb(38, 80, 170)\";\r\n        break;\r\n      case belongs.NEUTRAL:\r\n        return \"rgb(214, 214, 95)\";\r\n        break;\r\n      case belongs.BLACK:\r\n        return \"black\";\r\n        break;\r\n      default:\r\n    }\r\n  };\r\n  isEnabled = () => {\r\n    if (this.props.card.IsFliped) return false;\r\n    if (this.props.currentTurn == currentTurn.NONE && this.isHost) return true;\r\n    else {\r\n      if (this.props.isHost && this.props.currentTurn == currentTurn.HOST)\r\n        return true;\r\n      else if (\r\n        !this.props.isHost &&\r\n        this.props.currentTurn == currentTurn.HOSTED\r\n      )\r\n        return true;\r\n      else return false;\r\n    }\r\n  };\r\n  getBackgroundImage = () => {\r\n    var res = \"\";\r\n    if (this.props.captainMode || !this.props.card.IsFliped) return res;\r\n    else {\r\n      const redColor = this.props.card.ImageOne ? RED1 : RED2;\r\n      const blueColor = this.props.card.ImageOne ? BLUE1 : BLUE2;\r\n      const yellowColor = this.props.card.ImageOne ? YELLOW1 : YELLOW2;\r\n      switch (this.props.card.BelongsTo) {\r\n        case belongs.HOST:\r\n          res = \"url(\" + redColor + \")\";\r\n          break;\r\n        case belongs.HOSTED:\r\n          res = \"url(\" + blueColor + \")\";\r\n          break;\r\n        case belongs.NEUTRAL:\r\n          res = \"url(\" + yellowColor + \")\";\r\n          break;\r\n        case belongs.BLACK:\r\n          res = \"url(\" + BLACK + \")\";\r\n          break;\r\n      }\r\n\r\n      return res;\r\n    }\r\n  };\r\n  onButtonClick = () => {\r\n    \r\n\r\n    try {\r\n      this.props.socket.emit(\"UPDATE_STATE\", {\r\n        card: this.props.card,\r\n        game_id: this.props.gameId,\r\n        // currentTurn: this.props.currentTurn,\r\n      });\r\n    } catch (ex) {\r\n      console.log(ex);\r\n    }\r\n  };\r\n  render() {\r\n    const mystyle = {\r\n      margin: \"1%\",\r\n      paddingTop: \"10%\",\r\n      width: \"18%\",\r\n      backgroundColor: this.props.captainMode\r\n        ? this.getBackgroundColor(this.props.card.BelongsTo)\r\n        : \"rgb(231, 223, 149)\",\r\n      backgroundImage: this.getBackgroundImage(),\r\n      backgroundSize: \"cover\",\r\n      borderRadius: \"0.3cm\",\r\n      borderColor: \"rgb(247, 214, 176)\",\r\n      position: \"relative\",\r\n      opacity: 1,\r\n    };\r\n    return (\r\n      <Button\r\n        className={this.props.card.IsFliped ? \"background\" : \"\"}\r\n        style={mystyle}\r\n        disabled={!this.isEnabled()}\r\n        onClick={this.onButtonClick}\r\n      >\r\n        {!this.props.card.IsFliped ? (\r\n          <h4\r\n            style={{\r\n              fontWeight: \"bold\",\r\n              fontFamily: \"Guttman Vilna\",\r\n              backgroundColor: \"white\",\r\n              color: \"black\",\r\n              position: \"absolute\",\r\n              bottom: 0,\r\n              left: 0,\r\n              right: 0,\r\n              marginLeft: \"10%\",\r\n              marginRight: \"10%\",\r\n              borderRadius: \"0.3cm\",\r\n              borderColor: \"black\",\r\n              borderWidth: \"5cm\",\r\n            }}\r\n          >\r\n            {this.props.card.Value}\r\n          </h4>\r\n        ) : null}\r\n      </Button>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\nimport \"./Card.css\";\r\nimport Flippy, { FrontSide, BackSide } from \"react-flippy\";\r\nimport Card from \"./Card\";\r\nimport ReactCardFlip from \"react-card-flip\";\r\nexport default class RowOfCards extends Component {\r\n  state = {};\r\n  componentDidMount = () => {};\r\n  constructor(props) {\r\n    super();\r\n  }\r\n  getCards = () => {\r\n    return this.props.cards.map((card) => (\r\n      <Card\r\n        // rowOfCards={this.props.rowOfCards}\r\n        board={this.props.board}\r\n        card={card}\r\n        captainMode={this.props.captainMode}\r\n        currentTurn={this.props.currentTurn}\r\n        isHost={this.props.isHost}\r\n        socket={this.props.socket}\r\n        gameId={this.props.gameId}\r\n      ></Card>\r\n    ));\r\n  };\r\n  render() {\r\n    return <div className=\"rows \">{this.getCards()}</div>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport RowOfCards from \"./RowOfCards\";\r\nexport default class Board extends Component {\r\n  state = {};\r\n  constructor(props) {\r\n    super();\r\n  }\r\n  getRowsOfCards = () => {\r\n    return this.props.board.RowsOfCards.map((rowOfCards) => (\r\n      <RowOfCards\r\n        board={this.props.board}\r\n        cards={rowOfCards.Cards}\r\n        captainMode={this.props.captainMode}\r\n        isHost={this.props.isHost}\r\n        currentTurn={this.props.currentTurn}\r\n        socket={this.props.socket}\r\n        gameId={this.props.gameId}\r\n      ></RowOfCards>\r\n    ));\r\n  };\r\n\r\n  componentDidMount = () => {};\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"board\">{this.getRowsOfCards()}</div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","/*\r\n  All code here is blatantly stolen from Treehouse's React Basics workshop found at https://teamtreehouse.com/library/react-basics\r\n\r\n  The difference is, after completing the worksjop I ES2015-ified the react components and javascript as an exercise to practice more ES2015.\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport \"./ScoreBoard.css\";\r\n\r\n// Es6 Stateless component\r\nconst Stats = (props) => {\r\n  const totalPlayers = props.players.length;\r\n\r\n  return (\r\n    <table className=\"stats\">\r\n      <tbody>\r\n        <tr>\r\n          <td>Echipe:</td>\r\n          <td>{totalPlayers}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n// Define proptypes fpr a stateless component\r\n// Stats.propTypes = {\r\n//   players: React.PropTypes.array.isRequired,\r\n// };\r\n\r\n// Es6 Stateless component\r\nconst Header = (props) => (\r\n  <div className=\"header\">\r\n    <Stats players={props.players} />\r\n    <h1>{props.title}</h1>\r\n  </div>\r\n);\r\n// Define proptypes fpr a stateless component\r\n// Header.propTypes = {\r\n//   title: React.PropTypes.string.isRequired,\r\n//   players: React.PropTypes.array.isRequired,\r\n// };\r\n\r\n// Es6 Stateless component\r\nconst Counter = (props) => (\r\n  <div className=\"counter\">\r\n    <div className=\"counter-score\"> {props.score} </div>\r\n  </div>\r\n);\r\n\r\n// Es6 Stateless component\r\nconst Player = (props) => (\r\n  <div className=\"player\">\r\n    <div className=\"player-name\">{props.name}</div>\r\n    {(props.turn == \"host\" && props.name == \"Red Team\") ||\r\n    (props.turn == \"hosted\" && props.name == \"Blue Team\") ? (\r\n      <div className=\"spinner\">\r\n        <Spinner\r\n          animation=\"grow\"\r\n          variant={props.name == \"Red Team\" ? \"danger\" : \"primary\"}\r\n        />\r\n      </div>\r\n    ) : null}\r\n    <div className=\"player-score\">\r\n      <Counter score={props.score} onChange={props.onScoreChange} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nclass ScoreBoard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Set the initial state\r\n    this.state = {};\r\n    // Bind custom methods\r\n    // this._onScoreChange = this._onScoreChange.bind(this);\r\n  }\r\n\r\n  //   _onScoreChange(index, delta) {\r\n  //     this.state.players[index].score += delta;\r\n  //     this.setState(this.state);\r\n  //   }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"scoreboard\">\r\n        <Header title={this.props.title} players={this.props.initialPlayers} />\r\n\r\n        <div className=\"players\">\r\n          {this.props.initialPlayers.map((player, index) => (\r\n            <Player\r\n              onScoreChange={(delta) => this._onScoreChange(index, delta)}\r\n              turn={this.props.turn}\r\n              name={player.name}\r\n              score={player.score}\r\n              key={player.id}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ScoreBoard;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Image from \"react-bootstrap/Image\";\nimport io from \"socket.io-client\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Board from \"./components/Board\";\nimport ScoreBoard from \"./components/ScoreBoard\";\n\nconst status = {\n  INITIAL: \"initial\",\n  CREATED: \"created\",\n  RUNNING: \"running\",\n  FINISHED: \"finished\",\n};\nconst currentTurn = {\n  NONE: \"none\",\n  HOST: \"host\",\n  HOSTED: \"hosted\",\n};\nconst winner = {\n  INITIAL: \"initial\",\n  HOST: \"host\",\n  HOSTED: \"hosted\",\n};\n//http://localhost:3000\n//https://code-names-hebrew.herokuapp.com/\nconst socket = io(\"https://code-names-hebrew.herokuapp.com/\");\n\nclass App extends Component {\n  state = {\n    game_id: -1,\n    game_name: \"\",\n    user_id: \"\",\n    user_name: \"\",\n    status: status.INITIAL,\n    board: [],\n    captain_mode: false,\n    is_host: false,\n    start_button_clicked: false,\n    current_turn: currentTurn.NONE,\n    players: [],\n    previous_game: {},\n  };\n\n  constructor(props) {\n    super(props);\n  }\n  componentDidMount() {\n    //host+hosted\n    socket.on(\"INITIAL_USER_DATA\", (data) => {\n      this.setState({ user_id: data.user_id });\n      console.log(\"success!!!!!! user id is:\" + this.state.user_id);\n    console.log(data.games);\n    });\n    //host\n    socket.on(\"GAME_CREATED\", (data) => {\n      console.log(\"game created\");\n      this.setState({ status: status.CREATED, game_id: data.Id });\n    });\n    //host+hosted\n    socket.on(\"RUN_GAME\", (data) => {\n\n      this.setState({ status: status.RUNNING, board: data.Board });\n    });\n   //host+hosted\n    socket.on(\"START_GAME\", (data) => {\n      this.setState({\n        current_turn: currentTurn.HOST,\n        players: [\n          {\n            name: \"Red Team\",\n            score: data.HostPlayer.Score,\n            id: 1,\n          },\n          {\n            name: \"Blue Team\",\n            score: data.HostedPlayer.Score,\n            id: 2,\n          },\n        ],\n      });\n    });\n    socket.on(\"UPDATE_BOARD\", (data) => {\n      //console.log(data.Board);\n      this.setState({\n        board: data.Board,\n        current_turn: data.HostTurn ? currentTurn.HOST : currentTurn.HOSTED,\n        winner: data.Winner,\n        status:\n          data.Winner != winner.INITIAL ? status.FINISHED : this.state.status,\n        players: [\n          {\n            name: \"Red Team\",\n            score: data.HostPlayer.Score,\n            id: 1,\n          },\n          {\n            name: \"Blue Team\",\n            score: data.HostedPlayer.Score,\n            id: 2,\n          },\n        ],\n      });\n      if (data.Winner != winner.INITIAL && this.state.is_host) {\n        socket.emit(\"END_GAME\", { game_id: this.state.game_id });\n      }\n    });\n    socket.on(\"SAVE_PREVIOUS\", (data) => {\n      this.setState({ previous_game: data });\n    });\n    socket.on(\"INITIALIZE_STATE\", (data) => {\n      console.log(\"in initialize\");\n      console.log(data.game.Board);\n      this.setState({\n        game_id: data.game.Id,\n        game_name: data.game.Name,\n        user_id: data.is_host\n          ? data.game.HostPlayer.Id\n          : data.game.HostedPlayer.Id,\n        user_name: data.is_host\n          ? data.game.HostPlayer.Name\n          : data.game.HostedPlayer.Name,\n        status: status.RUNNING,\n        board: data.game.Board,\n        captain_mode: false,\n        is_host: data.is_host ? true : false,\n        start_button_clicked: false,\n        current_turn: currentTurn.NONE,\n        players: [],\n      });\n    });\n    \n  }\n  createNewGame = () => {\n    this.setState({ is_host: true });\n    socket.emit(\"CREATE_GAME\", {\n      game_name: this.state.game_name,\n      user_id: this.state.user_id,\n      user_name: this.state.user_name,\n    });\n  };\n  ConnectGame = () => {\n    socket.emit(\"CONNECT_GAME\", {\n      game_id: this.state.game_id,\n      user_id: this.state.user_id,\n      user_name: this.state.user_name,\n    });\n  };\n  changeToCaptainMode = (e) => {\n    this.setState({ captain_mode: true });\n  };\n\n  changeBackToNormalMode = (e) => {\n    this.setState({ captain_mode: false });\n  };\n  isMyTurn = () => {\n    let res = false;\n    if (\n      this.state.is_host == true &&\n      this.state.current_turn == currentTurn.HOST\n    )\n      res = true;\n    else if (\n      this.state.is_host == false &&\n      this.state.current_turn == currentTurn.HOSTED\n    )\n      res = true;\n    return res;\n  };\n\n  startButtonOnClick = (e) => {\n    this.setState({ start_button_clicked: true });\n    socket.emit(\"START_GAME\", {\n      game_id: this.state.game_id,\n    });\n  };\n  ShuffleButtonOnClick = (e)=>{\n    socket.emit(\"SHUFFLE_BOARD\", {  game_id: this.state.game_id});\n  }\n  \n  rematchButtonOnClick = (e) => {\n    socket.emit(\"REMATCH\", this.state.previous_game);\n  };\n  endTurnButtonOnClick = (e)=>{\n    socket.emit(\"SWITCH_TURN\", {\n      game_id: this.state.game_id\n  });}\n\n  render() {\n    let onChangeModeClick = this.state.captain_mode\n      ? this.changeBackToNormalMode\n      : this.changeToCaptainMode;\n\n    const ChangeModeStyle = {\n      fontFamily: \"Guttman Vilna\",\n      marginTop: \"0.5%\",\n      fontWeight: \"bold\",\n      fontSize: \"150%\",\n    };\n    const teamColor =\n      this.state.current_turn == currentTurn.HOST ? \"RED\" : \"BLUE\";\n    const turnMessageVariant =\n      this.state.current_turn == currentTurn.HOST ? \"danger\" : \"primary\";\n    const winnerColor = this.state.winner == winner.HOST ? \"RED\" : \"BLUE\";\n    return (\n      <div className=\"App\">\n        <Image\n          className={\n            this.state.status === status.RUNNING ? \"Img animator\" : \"Img\"\n          }\n          src=\"https://upload.wikimedia.org/wikipedia/he/4/48/Codenames-hebrew-cover.jpg\"\n        />\n        {this.state.status === status.INITIAL ? (\n          <div>\n            <Accordion className=\"Acc\">\n              <Card className=\"cards\">\n                <Card.Header>\n                  <Accordion.Toggle as={Button} variant=\"info\" eventKey=\"0\">\n                    Create Game!\n                  </Accordion.Toggle>\n                </Card.Header>\n                <Accordion.Collapse eventKey=\"0\">\n                  <Card.Body className=\"CardBody\">\n                    <Form>\n                      <Form.Row>\n                        <Form.Group as={Col} controlId=\"formGridUserName\">\n                          <Form.Label className=\"labels\">User Name</Form.Label>\n                          <Form.Control\n                            placeholder=\"Enter user name\"\n                            onChange={(e) => {\n                              this.setState({ user_name: e.target.value });\n                            }}\n                          />\n                        </Form.Group>\n                        <Form.Group as={Col} controlId=\"formGridRoomID\">\n                          <Form.Label className=\"labels\">Room Name</Form.Label>\n                          <Form.Control\n                            placeholder=\"Enter room Name\"\n                            onChange={(e) => {\n                              this.setState({ game_name: e.target.value });\n                            }}\n                          />\n                        </Form.Group>\n                      </Form.Row>\n                    </Form>\n                    <Button\n                      variant=\"success\"\n                      type=\"submit\"\n                      onClick={(e) => {\n                        this.createNewGame();\n                      }}\n                    >\n                      Submit\n                    </Button>\n                  </Card.Body>\n                </Accordion.Collapse>\n              </Card>\n              <Card className=\"cards\">\n                <Card.Header>\n                  <Accordion.Toggle\n                    className=\"ab\"\n                    as={Button}\n                    variant=\"info\"\n                    eventKey=\"1\"\n                  >\n                    Join Game!\n                  </Accordion.Toggle>\n                </Card.Header>\n                <Accordion.Collapse eventKey=\"1\">\n                  <Card.Body className=\"CardBody\">\n                    <Form>\n                      <Form.Row>\n                        <Form.Group as={Col} controlId=\"formGridUserName\">\n                          <Form.Label className=\"labels\">User Name</Form.Label>\n                          <Form.Control\n                            placeholder=\"Enter user name\"\n                            onChange={(e) => {\n                              this.setState({ user_name: e.target.value });\n                            }}\n                          />\n                        </Form.Group>\n                        <Form.Group as={Col} controlId=\"formGridRoomID\">\n                          <Form.Label className=\"labels\">Room Id</Form.Label>\n                          <Form.Control\n                            placeholder=\"Enter room ID\"\n                            onChange={(e) => {\n                              this.setState({ game_id: e.target.value });\n                            }}\n                          />\n                        </Form.Group>\n                      </Form.Row>\n                    </Form>\n                    <Button\n                      variant=\"success\"\n                      type=\"submit\"\n                      onClick={(e) => {\n                        this.ConnectGame();\n                      }}\n                    >\n                      Submit\n                    </Button>\n                  </Card.Body>\n                </Accordion.Collapse>\n              </Card>\n            </Accordion>\n          </div>\n        ) : null}\n        {this.state.status === status.CREATED ? (\n          <div>\n            <h1>\n              <Badge variant=\"success\">\n                Room #{this.state.game_id} had been created!\n              </Badge>\n            </h1>\n            <h1>\n              <Badge variant=\"success\">Waiting for a player to join...</Badge>\n            </h1>\n            <Spinner className=\"sp\" animation=\"grow\" variant=\"danger\" />\n          </div>\n        ) : null}\n        {this.state.status === status.RUNNING ? (\n          <div>\n            <div>\n              {this.state.is_host ? (\n                !this.state.start_button_clicked ? (\n                  <div>\n                  <div>\n                  <Button\n                    style={ChangeModeStyle}\n                    variant=\"dark\"\n                    onClick={this.ShuffleButtonOnClick}\n                  >\n                    Shuffle Board\n                  </Button>\n                  </div>\n                 \n                  <div>\n                  <Button\n                    style={ChangeModeStyle}\n                    variant=\"success\"\n                    onClick={this.startButtonOnClick}\n                  >\n                    Start\n                  </Button>\n                  </div>\n                  </div>\n                ) : null\n              ) : this.state.current_turn == currentTurn.NONE ? (\n                <div>\n                  <Badge style={ChangeModeStyle} variant=\"dark\">\n                    Waiting for Host to start the game..\n                  </Badge>\n                  <Spinner animation=\"border\" />\n                </div>\n              ) : null}\n            </div>\n            <div>\n              {this.state.current_turn != currentTurn.NONE ? (\n                <div>\n                <div className=\"sb\">\n                  <ScoreBoard\n                    turn={this.state.current_turn}\n                    initialPlayers={this.state.players}\n                  ></ScoreBoard>\n                  <Button\n                    variant=\"dark\"\n                    style={ChangeModeStyle}\n                    onClick={onChangeModeClick}\n                  >\n                    Captain View\n                  </Button>\n                </div>\n                {this.isMyTurn()?\n                <div>\n                <Button\n                    variant={turnMessageVariant}\n                    style={ChangeModeStyle}\n                    onClick={this.endTurnButtonOnClick}\n                  >\n                    End Turn\n                  </Button>\n                  </div>:null}\n                </div>\n              ) : null}\n            </div>\n            <div>\n              <Board\n                board={this.state.board}\n                isHost={this.state.is_host}\n                currentTurn={this.state.current_turn}\n                captainMode={this.state.captain_mode}\n                socket={socket}\n                gameId={this.state.game_id}\n               \n              ></Board>\n            </div>\n          </div>\n        ) : null}\n        {this.state.status === status.FINISHED ? (\n          <div>\n            <div>\n              <Badge\n                style={ChangeModeStyle}\n                variant={winnerColor == \"RED\" ? \"danger\" : \"primary\"}\n              >\n                {winnerColor} Team won!\n              </Badge>\n            </div>\n            <div>\n              <Button\n                style={ChangeModeStyle}\n                variant=\"dark\"\n                onClick={this.rematchButtonOnClick}\n              >\n                REMATCH!\n              </Button>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/red1.07394b93.jpg\";","module.exports = __webpack_public_path__ + \"static/media/red2.53224105.jpg\";","module.exports = __webpack_public_path__ + \"static/media/blue1.fa37e825.jpg\";","module.exports = __webpack_public_path__ + \"static/media/blue2.984cdca7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/yellow1.df9fa680.jpg\";","module.exports = __webpack_public_path__ + \"static/media/yellow2.95c91154.jpg\";","module.exports = __webpack_public_path__ + \"static/media/black.25a20943.jpg\";"],"sourceRoot":""}